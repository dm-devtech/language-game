{"version":3,"sources":["components/GermanNouns.js","components/GermanVerbs.js","components/FrenchNouns.js","components/FrenchVerbs.js","components/LatinNouns.js","components/LatinVerbs.js","components/Home.js","components/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["GermanNouns","props","checkAnswer","e","parseInt","target","getAttribute","state","wordToMatch","id","setState","answerMsg","nextWord","setTimeout","selectionOne","selectionTwo","selectionThree","counter","apiLength","quantity","max","correctWord","set","Set","add","size","Math","floor","random","a","this","Array","from","myRandomInts","v","i","randomOptions","myRandomOrder","randomOrder","randomOrders","randomOptionOne","randomOptionTwo","randomOptionThree","options","dictionary","length","newRandomWord","randomisedOptions","randomisedOrder","allocatedOptions","fetch","response","json","data","filteredDictionary","filter","word","wordtype","className","loading","data-testid","eng","onClick","word_id","ger","Component","GermanVerbs","FrenchNouns","console","log","fre","FrenchVerbs","LatinNouns","lat","LatinVerbs","Home","redirectHandlerGerman","redirectGerman","renderRedirectGerman","redirectHandlerGermanVerbs","redirectGermanVerbs","renderRedirectGermanVerbs","redirectHandlerFrench","redirectFrench","renderRedirectFrench","redirectHandlerFrenchVerbs","redirectFrenchVerbs","renderRedirectFrenchVerbs","redirectHandlerLatin","redirectLatin","renderRedirectLatin","redirectHandlerLatinVerbs","redirectLatinVerbs","renderRedirectLatinVerbs","document","title","to","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.53196b3c.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass GermanNouns extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n      this.state = {\r\n        wordToMatch: [],\r\n        selectionOne: [],\r\n        selectionTwo: [],\r\n        selectionThree: [],\r\n        counter: 0,\r\n        answerMsg: \"\",\r\n        apiLength: 0\r\n      }\r\n  }\r\n\r\n  myRandomInts(quantity, max, correctWord){\r\n    const set = new Set()\r\n    set.add(correctWord)\r\n    while(set.size < quantity) {\r\n      set.add(Math.floor(Math.random() * (max)) + 1)\r\n    }\r\n    return set\r\n  }\r\n\r\n  myRandomOrder(quantity, max){\r\n    const set = new Set()\r\n    while(set.size < quantity) {\r\n      set.add(Math.floor(Math.random() * (max)) + 1)\r\n    }\r\n    return set\r\n  }\r\n\r\n  checkAnswer = e => {\r\n    let id = parseInt(e.target.getAttribute('word_id'))\r\n    if(id === this.state.wordToMatch.id){\r\n      this.setState({answerMsg: \"CORRECT\"})\r\n      this.nextWord()\r\n    } else {\r\n      this.setState({answerMsg: \"INCORRECT\"})\r\n      setTimeout(() => {\r\n        this.setState({answerMsg: \"\"})\r\n      }, 1000);\r\n    }\r\n    // id === this.state.wordToMatch.id ? console.log(\"correct\") : console.log(\"incorrect\")\r\n    // this.setState({counter: this.state.counter + 1})\r\n  }\r\n\r\n  async newRandomWord() {\r\n    const correctWord = await Math.floor(Math.random() * (this.state.apiLength)) // random number based on api length\r\n    return correctWord\r\n  }\r\n\r\n  async randomisedOptions(correctWord) {\r\n    const randomOptions = await Array.from(this.myRandomInts(3, this.state.apiLength, correctWord), (v, i) => v) // random numbers for options\r\n    return randomOptions\r\n  }\r\n\r\n  async randomisedOrder() {\r\n    const randomOrder = await Array.from(this.myRandomOrder(3, 3), (v, i) => v)\r\n    return randomOrder\r\n  }\r\n\r\n  async allocatedOptions(randomOptions, randomOrders) {\r\n    const randomOptionOne = await randomOptions[randomOrders[0]-1] // randomising order of options\r\n    const randomOptionTwo = await randomOptions[randomOrders[1]-1] // same as above\r\n    const randomOptionThree = await randomOptions[randomOrders[2]-1] // same as above\r\n    let options = [randomOptionOne, randomOptionTwo, randomOptionThree]\r\n    return options\r\n  }\r\n\r\n  async nextWord() {\r\n    this.setState({counter: this.state.counter + 1}) // score +1 when answer correct\r\n    setTimeout(() => {\r\n      this.setState({answerMsg: \"\"})\r\n    }, 1000); // correct message shown during game\r\n\r\n    this.setState({apiLength: this.state.dictionary.length-1})\r\n\r\n    const correctWord = await this.newRandomWord()\r\n    this.setState({wordToMatch: this.state.dictionary[correctWord]}) // allocating word to state\r\n\r\n    const randomOptions = await this.randomisedOptions(correctWord)\r\n    const randomOrders = await this.randomisedOrder() // allocating randomised selection order\r\n    const [randomOptionOne, randomOptionTwo, randomOptionThree] = await this.allocatedOptions(randomOptions, randomOrders)\r\n\r\n    this.setState({selectionOne: this.state.dictionary[randomOptionOne]}) // setting selection to state used for buttons\r\n    this.setState({selectionTwo: this.state.dictionary[randomOptionTwo]}) // same as above\r\n    this.setState({selectionThree: this.state.dictionary[randomOptionThree]}) // same as above\r\n  }\r\n\r\n\r\n  async componentDidMount() {\r\n    const url = 'https://language-lighthouse.herokuapp.com/api/german'\r\n    const response = await fetch(url)\r\n    const data = await response.json()\r\n\r\n    const filteredDictionary = data.filter(function (word) {\r\n      return word.wordtype === 'noun';\r\n    })\r\n\r\n    this.setState({dictionary: filteredDictionary})\r\n    this.setState({apiLength: this.state.dictionary.length-1})\r\n\r\n    const correctWord = await Math.floor(Math.random() * this.state.apiLength) // random number based on api length\r\n    this.setState({wordToMatch: this.state.dictionary[correctWord]}) // allocating word to state\r\n\r\n    const randomOptions = await this.randomisedOptions(correctWord)\r\n    const randomOrders = await this.randomisedOrder() // allocating randomised selection order\r\n    const [randomOptionOne, randomOptionTwo, randomOptionThree] = await this.allocatedOptions(randomOptions, randomOrders)\r\n\r\n    this.setState({selectionOne: this.state.dictionary[randomOptionOne]}) // setting selection to state used for buttons\r\n    this.setState({selectionTwo: this.state.dictionary[randomOptionTwo]}) // same as above\r\n    this.setState({selectionThree: this.state.dictionary[randomOptionThree]}) // same as above\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"Header\">Language Lighthouse</div>\r\n          {this.state.loading || !this.state.wordToMatch ? (\r\n            <div>loading...</div>\r\n          ) : (\r\n            <>\r\n              <div>\r\n                <div className=\"answer\" data-testid=\"eng\">English: {this.state.wordToMatch.eng}</div>\r\n                  <div>\r\n                    <button className=\"button\" onClick={this.checkAnswer} word_id={this.state.selectionOne.id}>{this.state.selectionOne.ger} </button>\r\n                      <br/>\r\n                    <button className=\"button\" onClick={this.checkAnswer} word_id={this.state.selectionTwo.id}>{this.state.selectionTwo.ger} </button>\r\n                      <br/>\r\n                    <button className=\"button\" onClick={this.checkAnswer} word_id={this.state.selectionThree.id}>{this.state.selectionThree.ger} </button>\r\n                      <br/>\r\n                  </div>\r\n                    <div className=\"body-text\">Score: {this.state.counter} {this.state.answerMsg}</div>\r\n                </div>\r\n            </>\r\n          )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default GermanNouns\r\n","import React, { Component } from 'react';\r\n\r\nclass GermanVerbs extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n      this.state = {\r\n        wordToMatch: [],\r\n        selectionOne: [],\r\n        selectionTwo: [],\r\n        selectionThree: [],\r\n        counter: 0,\r\n        answerMsg: \"\",\r\n        apiLength: 0\r\n      }\r\n  }\r\n\r\n  myRandomInts(quantity, max, correctWord){\r\n    const set = new Set()\r\n    set.add(correctWord)\r\n    while(set.size < quantity) {\r\n      set.add(Math.floor(Math.random() * (max)) + 1)\r\n    }\r\n    return set\r\n  }\r\n\r\n  myRandomOrder(quantity, max){\r\n    const set = new Set()\r\n    while(set.size < quantity) {\r\n      set.add(Math.floor(Math.random() * (max)) + 1)\r\n    }\r\n    return set\r\n  }\r\n\r\n  checkAnswer = e => {\r\n    let id = parseInt(e.target.getAttribute('word_id'))\r\n    if(id === this.state.wordToMatch.id){\r\n      this.setState({answerMsg: \"CORRECT\"})\r\n      this.nextWord()\r\n    } else {\r\n      this.setState({answerMsg: \"INCORRECT\"})\r\n      setTimeout(() => {\r\n        this.setState({answerMsg: \"\"})\r\n      }, 1000);\r\n    }\r\n    // id === this.state.wordToMatch.id ? console.log(\"correct\") : console.log(\"incorrect\")\r\n    // this.setState({counter: this.state.counter + 1})\r\n  }\r\n\r\n  async newRandomWord() {\r\n    const correctWord = await Math.floor(Math.random() * (this.state.apiLength)) // random number based on api length\r\n    return correctWord\r\n  }\r\n\r\n  async randomisedOptions(correctWord) {\r\n    const randomOptions = await Array.from(this.myRandomInts(3, this.state.apiLength, correctWord), (v, i) => v) // random numbers for options\r\n    return randomOptions\r\n  }\r\n\r\n  async randomisedOrder() {\r\n    const randomOrder = await Array.from(this.myRandomOrder(3, 3), (v, i) => v)\r\n    return randomOrder\r\n  }\r\n\r\n  async allocatedOptions(randomOptions, randomOrders) {\r\n    const randomOptionOne = await randomOptions[randomOrders[0]-1] // randomising order of options\r\n    const randomOptionTwo = await randomOptions[randomOrders[1]-1] // same as above\r\n    const randomOptionThree = await randomOptions[randomOrders[2]-1] // same as above\r\n    let options = [randomOptionOne, randomOptionTwo, randomOptionThree]\r\n    return options\r\n  }\r\n\r\n  async nextWord() {\r\n    this.setState({counter: this.state.counter + 1}) // score +1 when answer correct\r\n    setTimeout(() => {\r\n      this.setState({answerMsg: \"\"})\r\n    }, 1000); // correct message shown during game\r\n\r\n    this.setState({apiLength: this.state.dictionary.length-1})\r\n\r\n    const correctWord = await this.newRandomWord()\r\n    this.setState({wordToMatch: this.state.dictionary[correctWord]}) // allocating word to state\r\n\r\n    const randomOptions = await this.randomisedOptions(correctWord)\r\n    const randomOrders = await this.randomisedOrder() // allocating randomised selection order\r\n    const [randomOptionOne, randomOptionTwo, randomOptionThree] = await this.allocatedOptions(randomOptions, randomOrders)\r\n\r\n    this.setState({selectionOne: this.state.dictionary[randomOptionOne]}) // setting selection to state used for buttons\r\n    this.setState({selectionTwo: this.state.dictionary[randomOptionTwo]}) // same as above\r\n    this.setState({selectionThree: this.state.dictionary[randomOptionThree]}) // same as above\r\n  }\r\n\r\n\r\n  async componentDidMount() {\r\n    const url = 'https://language-lighthouse.herokuapp.com/api/german'\r\n    const response = await fetch(url)\r\n    const data = await response.json()\r\n\r\n    const filteredDictionary = await data.filter(function (word) {\r\n      return word.wordtype === 'verb';\r\n    })\r\n\r\n    this.setState({dictionary: filteredDictionary})\r\n    this.setState({apiLength: this.state.dictionary.length-1})\r\n\r\n    const correctWord = await Math.floor(Math.random() * (this.state.apiLength)) // random number based on api length\r\n    this.setState({wordToMatch: this.state.dictionary[correctWord]}) // allocating word to state\r\n\r\n    const randomOptions = await this.randomisedOptions(correctWord)\r\n    const randomOrders = await this.randomisedOrder() // allocating randomised selection order\r\n    const [randomOptionOne, randomOptionTwo, randomOptionThree] = await this.allocatedOptions(randomOptions, randomOrders)\r\n\r\n    this.setState({selectionOne: this.state.dictionary[randomOptionOne]}) // setting selection to state used for buttons\r\n    this.setState({selectionTwo: this.state.dictionary[randomOptionTwo]}) // same as above\r\n    this.setState({selectionThree: this.state.dictionary[randomOptionThree]}) // same as above\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"Header\">Language Lighthouse</div>\r\n          {this.state.loading || !this.state.wordToMatch ? (\r\n            <div>loading...</div>\r\n          ) : (\r\n            <>\r\n              <div>\r\n                <div className=\"answer\" data-testid=\"eng\">English: {this.state.wordToMatch.eng}</div>\r\n                  <div>\r\n                    <button className=\"button\" onClick={this.checkAnswer} word_id={this.state.selectionOne.id}>{this.state.selectionOne.ger} </button>\r\n                      <br/>\r\n                    <button className=\"button\" onClick={this.checkAnswer} word_id={this.state.selectionTwo.id}>{this.state.selectionTwo.ger} </button>\r\n                      <br/>\r\n                    <button className=\"button\" onClick={this.checkAnswer} word_id={this.state.selectionThree.id}>{this.state.selectionThree.ger} </button>\r\n                      <br/>\r\n                  </div>\r\n                    <div className=\"body-text\">Score: {this.state.counter} {this.state.answerMsg}</div>\r\n                </div>\r\n            </>\r\n          )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default GermanVerbs\r\n","import React, { Component } from 'react';\r\nimport regeneratorRuntime from \"regenerator-runtime\";\r\n\r\nclass FrenchNouns extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n      this.state = {\r\n        wordToMatch: [],\r\n        selectionOne: [],\r\n        selectionTwo: [],\r\n        selectionThree: [],\r\n        counter: 0,\r\n        answerMsg: \"\",\r\n        apiLength: 0\r\n      }\r\n  }\r\n\r\n  myRandomInts(quantity, max, correctWord){\r\n    const set = new Set()\r\n    set.add(correctWord)\r\n    while(set.size < quantity) {\r\n      set.add(Math.floor(Math.random() * (max)) + 1)\r\n    }\r\n    return set\r\n  }\r\n\r\n  myRandomOrder(quantity, max){\r\n    const set = new Set()\r\n    while(set.size < quantity) {\r\n      set.add(Math.floor(Math.random() * (max)) + 1)\r\n    }\r\n    return set\r\n  }\r\n\r\n  checkAnswer = e => {\r\n    let id = parseInt(e.target.getAttribute('word_id'))\r\n    if(id === this.state.wordToMatch.id){\r\n      this.setState({answerMsg: \"CORRECT\"})\r\n      this.nextWord()\r\n    } else {\r\n      this.setState({answerMsg: \"INCORRECT\"})\r\n      setTimeout(() => {\r\n        this.setState({answerMsg: \"\"})\r\n      }, 1000);\r\n    }\r\n    // id === this.state.wordToMatch.id ? console.log(\"correct\") : console.log(\"incorrect\")\r\n    // this.setState({counter: this.state.counter + 1})\r\n  }\r\n\r\n  async newRandomWord() {\r\n    const correctWord = await Math.floor(Math.random() * (this.state.apiLength)) // random number based on api length\r\n    return correctWord\r\n  }\r\n\r\n  async randomisedOptions(correctWord) {\r\n    const randomOptions = await Array.from(this.myRandomInts(3, this.state.apiLength, correctWord), (v, i) => v) // random numbers for options\r\n    return randomOptions\r\n  }\r\n\r\n  async randomisedOrder() {\r\n    const randomOrder = await Array.from(this.myRandomOrder(3, 3), (v, i) => v)\r\n    return randomOrder\r\n  }\r\n\r\n  async allocatedOptions(randomOptions, randomOrders) {\r\n    const randomOptionOne = await randomOptions[randomOrders[0]-1] // randomising order of options\r\n    const randomOptionTwo = await randomOptions[randomOrders[1]-1] // same as above\r\n    const randomOptionThree = await randomOptions[randomOrders[2]-1] // same as above\r\n    let options = [randomOptionOne, randomOptionTwo, randomOptionThree]\r\n    return options\r\n  }\r\n\r\n  async nextWord() {\r\n    this.setState({counter: this.state.counter + 1}) // score +1 when answer correct\r\n    setTimeout(() => {\r\n      this.setState({answerMsg: \"\"})\r\n    }, 1000); // correct message shown during game\r\n\r\n    this.setState({apiLength: this.state.dictionary.length-1})\r\n\r\n    const correctWord = await this.newRandomWord()\r\n    this.setState({wordToMatch: this.state.dictionary[correctWord]}) // allocating word to state\r\n\r\n    const randomOptions = await this.randomisedOptions(correctWord)\r\n    const randomOrders = await this.randomisedOrder() // allocating randomised selection order\r\n    const [randomOptionOne, randomOptionTwo, randomOptionThree] = await this.allocatedOptions(randomOptions, randomOrders)\r\n\r\n    this.setState({selectionOne: this.state.dictionary[randomOptionOne]}) // setting selection to state used for buttons\r\n    this.setState({selectionTwo: this.state.dictionary[randomOptionTwo]}) // same as above\r\n    this.setState({selectionThree: this.state.dictionary[randomOptionThree]}) // same as above\r\n  }\r\n\r\n\r\n  async componentDidMount() {\r\n    const url = 'https://language-lighthouse.herokuapp.com/api/french'\r\n    const response = await fetch(url)\r\n    const data = await response.json()\r\n\r\n    const filteredDictionary = data.filter(function (word) {\r\n    return word.wordtype === 'noun';\r\n    })\r\n\r\n    this.setState({dictionary: filteredDictionary})\r\n    this.setState({apiLength: this.state.dictionary.length-1})\r\n\r\n    const correctWord = await Math.floor(Math.random() * (this.state.apiLength)) // random number based on api length\r\n    this.setState({wordToMatch: this.state.dictionary[correctWord]}) // allocating word to state\r\n\r\n    const randomOptions = await this.randomisedOptions(correctWord)\r\n    const randomOrders = await this.randomisedOrder() // allocating randomised selection order\r\n    const [randomOptionOne, randomOptionTwo, randomOptionThree] = await this.allocatedOptions(randomOptions, randomOrders)\r\n\r\n    this.setState({selectionOne: this.state.dictionary[randomOptionOne]}) // setting selection to state used for buttons\r\n    this.setState({selectionTwo: this.state.dictionary[randomOptionTwo]}) // same as above\r\n    this.setState({selectionThree: this.state.dictionary[randomOptionThree]}) // same as above\r\n    console.log(this.state.selectionOne, this.state.selectionTwo, this.state.selectionThree)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"Header\">Language Lighthouse</div>\r\n          {this.state.loading || !this.state.wordToMatch ? (\r\n            <div>loading...</div>\r\n          ) : (\r\n            <>\r\n              <div>\r\n                <div className=\"answer\" data-testid=\"eng\">English: {this.state.wordToMatch.eng}</div>\r\n                  <div>\r\n                    <button data-testid=\"a\" className=\"button\" onClick={this.checkAnswer} word_id={this.state.selectionOne.id}>{this.state.selectionOne.fre} </button>\r\n                      <br/>\r\n                    <button data-testid=\"b\" className=\"button\" onClick={this.checkAnswer} word_id={this.state.selectionTwo.id}>{this.state.selectionTwo.fre} </button>\r\n                      <br/>\r\n                    <button data-testid=\"c\" className=\"button\" onClick={this.checkAnswer} word_id={this.state.selectionThree.id}>{this.state.selectionThree.fre} </button>\r\n                      <br/>\r\n                  </div>\r\n                    <div className=\"body-text\">Score: {this.state.counter} {this.state.answerMsg}</div>\r\n                </div>\r\n            </>\r\n          )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default FrenchNouns\r\n","import React, { Component } from 'react';\r\n\r\nclass FrenchVerbs extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n      this.state = {\r\n        wordToMatch: [],\r\n        selectionOne: [],\r\n        selectionTwo: [],\r\n        selectionThree: [],\r\n        counter: 0,\r\n        answerMsg: \"\",\r\n        apiLength: 0\r\n      }\r\n  }\r\n\r\n  myRandomInts(quantity, max, correctWord){\r\n    const set = new Set()\r\n    set.add(correctWord)\r\n    while(set.size < quantity) {\r\n      set.add(Math.floor(Math.random() * (max)) + 1)\r\n    }\r\n    return set\r\n  }\r\n\r\n  myRandomOrder(quantity, max){\r\n    const set = new Set()\r\n    while(set.size < quantity) {\r\n      set.add(Math.floor(Math.random() * (max)) + 1)\r\n    }\r\n    return set\r\n  }\r\n\r\n  checkAnswer = e => {\r\n    let id = parseInt(e.target.getAttribute('word_id'))\r\n    if(id === this.state.wordToMatch.id){\r\n      this.setState({answerMsg: \"CORRECT\"})\r\n      this.nextWord()\r\n    } else {\r\n      this.setState({answerMsg: \"INCORRECT\"})\r\n      setTimeout(() => {\r\n        this.setState({answerMsg: \"\"})\r\n      }, 1000);\r\n    }\r\n    // id === this.state.wordToMatch.id ? console.log(\"correct\") : console.log(\"incorrect\")\r\n    // this.setState({counter: this.state.counter + 1})\r\n  }\r\n\r\n  async newRandomWord() {\r\n    const correctWord = await Math.floor(Math.random() * (this.state.apiLength)) // random number based on api length\r\n    return correctWord\r\n  }\r\n\r\n  async randomisedOptions(correctWord) {\r\n    const randomOptions = await Array.from(this.myRandomInts(3, this.state.apiLength, correctWord), (v, i) => v) // random numbers for options\r\n    return randomOptions\r\n  }\r\n\r\n  async randomisedOrder() {\r\n    const randomOrder = await Array.from(this.myRandomOrder(3, 3), (v, i) => v)\r\n    return randomOrder\r\n  }\r\n\r\n  async allocatedOptions(randomOptions, randomOrders) {\r\n    const randomOptionOne = await randomOptions[randomOrders[0]-1] // randomising order of options\r\n    const randomOptionTwo = await randomOptions[randomOrders[1]-1] // same as above\r\n    const randomOptionThree = await randomOptions[randomOrders[2]-1] // same as above\r\n    let options = [randomOptionOne, randomOptionTwo, randomOptionThree]\r\n    return options\r\n  }\r\n\r\n  async nextWord() {\r\n    this.setState({counter: this.state.counter + 1}) // score +1 when answer correct\r\n    setTimeout(() => {\r\n      this.setState({answerMsg: \"\"})\r\n    }, 1000); // correct message shown during game\r\n\r\n    this.setState({apiLength: this.state.dictionary.length-1})\r\n\r\n    const correctWord = await this.newRandomWord()\r\n    this.setState({wordToMatch: this.state.dictionary[correctWord]}) // allocating word to state\r\n\r\n    const randomOptions = await this.randomisedOptions(correctWord)\r\n    const randomOrders = await this.randomisedOrder() // allocating randomised selection order\r\n    const [randomOptionOne, randomOptionTwo, randomOptionThree] = await this.allocatedOptions(randomOptions, randomOrders)\r\n\r\n    this.setState({selectionOne: this.state.dictionary[randomOptionOne]}) // setting selection to state used for buttons\r\n    this.setState({selectionTwo: this.state.dictionary[randomOptionTwo]}) // same as above\r\n    this.setState({selectionThree: this.state.dictionary[randomOptionThree]}) // same as above\r\n  }\r\n\r\n\r\n  async componentDidMount() {\r\n    const url = 'https://language-lighthouse.herokuapp.com/api/french'\r\n    const response = await fetch(url)\r\n    const data = await response.json()\r\n\r\n    const filteredDictionary = await data.filter(function (word) {\r\n      return word.wordtype === 'verb';\r\n    })\r\n\r\n    this.setState({dictionary: filteredDictionary})\r\n    this.setState({apiLength: this.state.dictionary.length-1})\r\n\r\n    const correctWord = await Math.floor(Math.random() * (this.state.apiLength)) // random number based on api length\r\n    this.setState({wordToMatch: this.state.dictionary[correctWord]}) // allocating word to state\r\n\r\n    const randomOptions = await this.randomisedOptions(correctWord)\r\n    const randomOrders = await this.randomisedOrder() // allocating randomised selection order\r\n    const [randomOptionOne, randomOptionTwo, randomOptionThree] = await this.allocatedOptions(randomOptions, randomOrders)\r\n\r\n    this.setState({selectionOne: this.state.dictionary[randomOptionOne]}) // setting selection to state used for buttons\r\n    this.setState({selectionTwo: this.state.dictionary[randomOptionTwo]}) // same as above\r\n    this.setState({selectionThree: this.state.dictionary[randomOptionThree]}) // same as above\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"Header\">Language Lighthouse</div>\r\n          {this.state.loading || !this.state.wordToMatch ? (\r\n            <div>loading...</div>\r\n          ) : (\r\n            <>\r\n              <div>\r\n                <div className=\"answer\" data-testid=\"eng\">English: {this.state.wordToMatch.eng}</div>\r\n                  <div>\r\n                    <button className=\"button\" onClick={this.checkAnswer} word_id={this.state.selectionOne.id}>{this.state.selectionOne.fre} </button>\r\n                      <br/>\r\n                    <button className=\"button\" onClick={this.checkAnswer} word_id={this.state.selectionTwo.id}>{this.state.selectionTwo.fre} </button>\r\n                      <br/>\r\n                    <button className=\"button\" onClick={this.checkAnswer} word_id={this.state.selectionThree.id}>{this.state.selectionThree.fre} </button>\r\n                      <br/>\r\n                  </div>\r\n                    <div className=\"body-text\">Score: {this.state.counter} {this.state.answerMsg}</div>\r\n                </div>\r\n            </>\r\n          )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default FrenchVerbs\r\n","import React, { Component } from 'react';\r\n\r\nclass LatinNouns extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n      this.state = {\r\n        wordToMatch: [],\r\n        selectionOne: [],\r\n        selectionTwo: [],\r\n        selectionThree: [],\r\n        counter: 0,\r\n        answerMsg: \"\",\r\n        apiLength: 0\r\n      }\r\n  }\r\n\r\n  myRandomInts(quantity, max, correctWord){\r\n    const set = new Set()\r\n    set.add(correctWord)\r\n    while(set.size < quantity) {\r\n      set.add(Math.floor(Math.random() * (max)) + 1)\r\n    }\r\n    return set\r\n  }\r\n\r\n  myRandomOrder(quantity, max){\r\n    const set = new Set()\r\n    while(set.size < quantity) {\r\n      set.add(Math.floor(Math.random() * (max)) + 1)\r\n    }\r\n    return set\r\n  }\r\n\r\n  checkAnswer = e => {\r\n    let id = parseInt(e.target.getAttribute('word_id'))\r\n    if(id === this.state.wordToMatch.id){\r\n      this.setState({answerMsg: \"CORRECT\"})\r\n      this.nextWord()\r\n    } else {\r\n      this.setState({answerMsg: \"INCORRECT\"})\r\n      setTimeout(() => {\r\n        this.setState({answerMsg: \"\"})\r\n      }, 1000);\r\n    }\r\n    // id === this.state.wordToMatch.id ? console.log(\"correct\") : console.log(\"incorrect\")\r\n    // this.setState({counter: this.state.counter + 1})\r\n  }\r\n\r\n  async newRandomWord() {\r\n    const correctWord = await Math.floor(Math.random() * (this.state.apiLength)) // random number based on api length\r\n    return correctWord\r\n  }\r\n\r\n  async randomisedOptions(correctWord) {\r\n    const randomOptions = await Array.from(this.myRandomInts(3, this.state.apiLength, correctWord), (v, i) => v) // random numbers for options\r\n    return randomOptions\r\n  }\r\n\r\n  async randomisedOrder() {\r\n    const randomOrder = await Array.from(this.myRandomOrder(3, 3), (v, i) => v)\r\n    return randomOrder\r\n  }\r\n\r\n  async allocatedOptions(randomOptions, randomOrders) {\r\n    const randomOptionOne = await randomOptions[randomOrders[0]-1] // randomising order of options\r\n    const randomOptionTwo = await randomOptions[randomOrders[1]-1] // same as above\r\n    const randomOptionThree = await randomOptions[randomOrders[2]-1] // same as above\r\n    let options = [randomOptionOne, randomOptionTwo, randomOptionThree]\r\n    return options\r\n  }\r\n\r\n  async nextWord() {\r\n    this.setState({counter: this.state.counter + 1}) // score +1 when answer correct\r\n    setTimeout(() => {\r\n      this.setState({answerMsg: \"\"})\r\n    }, 1000); // correct message shown during game\r\n\r\n    this.setState({apiLength: this.state.dictionary.length-1})\r\n\r\n    const correctWord = await this.newRandomWord()\r\n    this.setState({wordToMatch: this.state.dictionary[correctWord]}) // allocating word to state\r\n\r\n    const randomOptions = await this.randomisedOptions(correctWord)\r\n    const randomOrders = await this.randomisedOrder() // allocating randomised selection order\r\n    const [randomOptionOne, randomOptionTwo, randomOptionThree] = await this.allocatedOptions(randomOptions, randomOrders)\r\n\r\n    this.setState({selectionOne: this.state.dictionary[randomOptionOne]}) // setting selection to state used for buttons\r\n    this.setState({selectionTwo: this.state.dictionary[randomOptionTwo]}) // same as above\r\n    this.setState({selectionThree: this.state.dictionary[randomOptionThree]}) // same as above\r\n  }\r\n\r\n\r\n  async componentDidMount() {\r\n    const url = 'https://language-lighthouse.herokuapp.com/api/latin'\r\n    const response = await fetch(url)\r\n    const data = await response.json()\r\n\r\n    const filteredDictionary = data.filter(function (word) {\r\n      return word.wordtype === 'noun';\r\n    })\r\n\r\n    this.setState({dictionary: filteredDictionary})\r\n    this.setState({apiLength: this.state.dictionary.length-1})\r\n\r\n    const correctWord = await Math.floor(Math.random() * (this.state.apiLength)) // random number based on api length\r\n    this.setState({wordToMatch: this.state.dictionary[correctWord]}) // allocating word to state\r\n\r\n    const randomOptions = await this.randomisedOptions(correctWord)\r\n    const randomOrders = await this.randomisedOrder() // allocating randomised selection order\r\n    const [randomOptionOne, randomOptionTwo, randomOptionThree] = await this.allocatedOptions(randomOptions, randomOrders)\r\n\r\n    this.setState({selectionOne: this.state.dictionary[randomOptionOne]}) // setting selection to state used for buttons\r\n    this.setState({selectionTwo: this.state.dictionary[randomOptionTwo]}) // same as above\r\n    this.setState({selectionThree: this.state.dictionary[randomOptionThree]}) // same as above\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"Header\">Language Lighthouse</div>\r\n          {this.state.loading || !this.state.wordToMatch ? (\r\n            <div>loading...</div>\r\n          ) : (\r\n            <>\r\n              <div>\r\n                <div className=\"answer\" data-testid=\"eng\">English: {this.state.wordToMatch.eng}</div>\r\n                  <div>\r\n                    <button className=\"button\" onClick={this.checkAnswer} word_id={this.state.selectionOne.id}>{this.state.selectionOne.lat} </button>\r\n                      <br/>\r\n                    <button className=\"button\" onClick={this.checkAnswer} word_id={this.state.selectionTwo.id}>{this.state.selectionTwo.lat} </button>\r\n                      <br/>\r\n                    <button className=\"button\" onClick={this.checkAnswer} word_id={this.state.selectionThree.id}>{this.state.selectionThree.lat} </button>\r\n                      <br/>\r\n                  </div>\r\n                    <div className=\"body-text\">Score: {this.state.counter} {this.state.answerMsg}</div>\r\n                </div>\r\n            </>\r\n          )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default LatinNouns\r\n","import React, { Component } from 'react';\r\n\r\nclass LatinVerbs extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n      this.state = {\r\n        wordToMatch: [],\r\n        selectionOne: [],\r\n        selectionTwo: [],\r\n        selectionThree: [],\r\n        counter: 0,\r\n        answerMsg: \"\",\r\n        apiLength: 0\r\n      }\r\n  }\r\n\r\n  myRandomInts(quantity, max, correctWord){\r\n    const set = new Set()\r\n    set.add(correctWord)\r\n    while(set.size < quantity) {\r\n      set.add(Math.floor(Math.random() * (max)) + 1)\r\n    }\r\n    return set\r\n  }\r\n\r\n  myRandomOrder(quantity, max){\r\n    const set = new Set()\r\n    while(set.size < quantity) {\r\n      set.add(Math.floor(Math.random() * (max)) + 1)\r\n    }\r\n    return set\r\n  }\r\n\r\n  checkAnswer = e => {\r\n    let id = parseInt(e.target.getAttribute('word_id'))\r\n    if(id === this.state.wordToMatch.id){\r\n      this.setState({answerMsg: \"CORRECT\"})\r\n      this.nextWord()\r\n    } else {\r\n      this.setState({answerMsg: \"INCORRECT\"})\r\n      setTimeout(() => {\r\n        this.setState({answerMsg: \"\"})\r\n      }, 1000);\r\n    }\r\n    // id === this.state.wordToMatch.id ? console.log(\"correct\") : console.log(\"incorrect\")\r\n    // this.setState({counter: this.state.counter + 1})\r\n  }\r\n\r\n  async newRandomWord() {\r\n    const correctWord = await Math.floor(Math.random() * (this.state.apiLength)) // random number based on api length\r\n    return correctWord\r\n  }\r\n\r\n  async randomisedOptions(correctWord) {\r\n    const randomOptions = await Array.from(this.myRandomInts(3, this.state.apiLength, correctWord), (v, i) => v) // random numbers for options\r\n    return randomOptions\r\n  }\r\n\r\n  async randomisedOrder() {\r\n    const randomOrder = await Array.from(this.myRandomOrder(3, 3), (v, i) => v)\r\n    return randomOrder\r\n  }\r\n\r\n  async allocatedOptions(randomOptions, randomOrders) {\r\n    const randomOptionOne = await randomOptions[randomOrders[0]-1] // randomising order of options\r\n    const randomOptionTwo = await randomOptions[randomOrders[1]-1] // same as above\r\n    const randomOptionThree = await randomOptions[randomOrders[2]-1] // same as above\r\n    let options = [randomOptionOne, randomOptionTwo, randomOptionThree]\r\n    return options\r\n  }\r\n\r\n  async nextWord() {\r\n    this.setState({counter: this.state.counter + 1}) // score +1 when answer correct\r\n    setTimeout(() => {\r\n      this.setState({answerMsg: \"\"})\r\n    }, 1000); // correct message shown during game\r\n\r\n    this.setState({apiLength: this.state.dictionary.length-1})\r\n\r\n    const correctWord = await this.newRandomWord()\r\n    this.setState({wordToMatch: this.state.dictionary[correctWord]}) // allocating word to state\r\n\r\n    const randomOptions = await this.randomisedOptions(correctWord)\r\n    const randomOrders = await this.randomisedOrder() // allocating randomised selection order\r\n    const [randomOptionOne, randomOptionTwo, randomOptionThree] = await this.allocatedOptions(randomOptions, randomOrders)\r\n\r\n    this.setState({selectionOne: this.state.dictionary[randomOptionOne]}) // setting selection to state used for buttons\r\n    this.setState({selectionTwo: this.state.dictionary[randomOptionTwo]}) // same as above\r\n    this.setState({selectionThree: this.state.dictionary[randomOptionThree]}) // same as above\r\n  }\r\n\r\n\r\n  async componentDidMount() {\r\n    const url = 'https://language-lighthouse.herokuapp.com/api/latin'\r\n    const response = await fetch(url)\r\n    const data = await response.json()\r\n\r\n    const filteredDictionary = await data.filter(function (word) {\r\n      return word.wordtype === 'verb' })\r\n\r\n    this.setState({dictionary: filteredDictionary})\r\n    this.setState({apiLength: this.state.dictionary.length-1})\r\n\r\n    const correctWord = await Math.floor(Math.random() * (this.state.apiLength)) // random number based on api length\r\n    this.setState({wordToMatch: this.state.dictionary[correctWord]}) // allocating word to state\r\n\r\n    const randomOptions = await this.randomisedOptions(correctWord)\r\n    const randomOrders = await this.randomisedOrder() // allocating randomised selection order\r\n    const [randomOptionOne, randomOptionTwo, randomOptionThree] = await this.allocatedOptions(randomOptions, randomOrders)\r\n\r\n    this.setState({selectionOne: this.state.dictionary[randomOptionOne]}) // setting selection to state used for buttons\r\n    this.setState({selectionTwo: this.state.dictionary[randomOptionTwo]}) // same as above\r\n    this.setState({selectionThree: this.state.dictionary[randomOptionThree]}) // same as above\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"Header\">Language Lighthouse</div>\r\n          {this.state.loading || !this.state.wordToMatch ? (\r\n            <div>loading...</div>\r\n          ) : (\r\n            <>\r\n              <div>\r\n                <div className=\"answer\" data-testid=\"eng\">English: {this.state.wordToMatch.eng}</div>\r\n                  <div>\r\n                    <button className=\"button\" onClick={this.checkAnswer} word_id={this.state.selectionOne.id}>{this.state.selectionOne.lat} </button>\r\n                      <br/>\r\n                    <button className=\"button\" onClick={this.checkAnswer} word_id={this.state.selectionTwo.id}>{this.state.selectionTwo.lat} </button>\r\n                      <br/>\r\n                    <button className=\"button\" onClick={this.checkAnswer} word_id={this.state.selectionThree.id}>{this.state.selectionThree.lat} </button>\r\n                      <br/>\r\n                  </div>\r\n                    <div className=\"body-text\">Score: {this.state.counter} {this.state.answerMsg}</div>\r\n                </div>\r\n            </>\r\n          )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default LatinVerbs\r\n","import React, { Component } from 'react';\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nclass Home extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n      this.state = {\r\n        redirectGerman: false,\r\n        redirectGermanVerbs: false,\r\n        redirectFrench: false,\r\n        redirectFrenchVerbs: false,\r\n        redirectLatin: false,\r\n        redirectLatinVerbs: false\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.title = \"Language lighthouse\";\r\n  }\r\n\r\n  redirectHandlerGerman = () => {\r\n    this.setState({redirectGerman: true})\r\n    this.renderRedirectGerman();\r\n  }\r\n\r\n  renderRedirectGerman() {\r\n    if (this.state.redirectGerman) {\r\n      return <Redirect to='/game/german/nouns' />\r\n    }\r\n  }\r\n\r\n  redirectHandlerGermanVerbs = () => {\r\n    this.setState({redirectGermanVerbs: true})\r\n    this.renderRedirectGermanVerbs();\r\n  }\r\n\r\n  renderRedirectGermanVerbs() {\r\n    if (this.state.redirectGermanVerbs) {\r\n      return <Redirect to='/game/german/verbs' />\r\n    }\r\n  }\r\n\r\n  redirectHandlerFrench = () => {\r\n    this.setState({redirectFrench: true})\r\n    this.renderRedirectFrench();\r\n  }\r\n\r\n  renderRedirectFrench() {\r\n    if (this.state.redirectFrench) {\r\n      return <Redirect to='/game/french/nouns' />\r\n    }\r\n  }\r\n\r\n  redirectHandlerFrenchVerbs = () => {\r\n    this.setState({redirectFrenchVerbs: true})\r\n    this.renderRedirectFrenchVerbs();\r\n  }\r\n\r\n  renderRedirectFrenchVerbs() {\r\n    if (this.state.redirectFrenchVerbs) {\r\n      return <Redirect to='/game/french/verbs' />\r\n    }\r\n  }\r\n\r\n  redirectHandlerLatin = () => {\r\n    this.setState({redirectLatin: true})\r\n    this.renderRedirectLatin();\r\n  }\r\n\r\n  renderRedirectLatin()  {\r\n    if (this.state.redirectLatin) {\r\n      return <Redirect to='/game/latin/nouns' />\r\n    }\r\n  }\r\n\r\n  redirectHandlerLatinVerbs = () => {\r\n    this.setState({redirectLatinVerbs: true})\r\n    this.renderRedirectLatinVerbs();\r\n  }\r\n\r\n  renderRedirectLatinVerbs() {\r\n    if (this.state.redirectLatinVerbs) {\r\n      return <Redirect to='/game/latin/verbs' />\r\n    }\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div>\r\n          <div className='Header'>\r\n            Language Lighthouse\r\n              <br/>\r\n                <div className=\"body-text\">(Langue Leuchtturm)\r\n                <br/>\r\n                <br/>\r\n                  Select a language:\r\n                <br/>\r\n                  <div className=\"german\">\r\n                    <button data-testid=\"nouns-de\" className=\"button\" onClick={this.redirectHandlerGerman}>Deutsch (Nouns)</button>\r\n\r\n                    <button data-testid=\"verbs-de\" className=\"button\" onClick={this.redirectHandlerGermanVerbs}>Deutsch (Verbs)</button>\r\n                  </div>\r\n                  <div className=\"french\">\r\n                    <button data-testid=\"nouns-fr\" className=\"button\" onClick={this.redirectHandlerFrench}>Français (Nouns)</button>\r\n\r\n                    <button data-testid=\"verbs-fr\" className=\"button\" onClick={this.redirectHandlerFrenchVerbs}>Français (Verbs)</button>\r\n                  </div>\r\n                  <div className=\"latin\">\r\n                    <button data-testid=\"nouns-la\" className=\"button\" onClick={this.redirectHandlerLatin}>Lingua Romanorum (Nouns)</button>\r\n\r\n                    <button data-testid=\"verbs-la\" className=\"button\" onClick={this.redirectHandlerLatinVerbs}>Lingua Romanorum (Verbs)</button>\r\n                  </div>\r\n                </div>\r\n          </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Home\r\n","import React, { Component } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport home from '../styling/iconfinder_Streamline-18_185038.png'\r\nimport {  } from \"react-router-dom\"\r\n\r\nexport default class Footer extends Component {\r\n  render() {\r\n    return (\r\n      <Link to=\"/\"><img src={home} alt=\"home-icon\" /></Link>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport { Route, Router, Switch } from \"react-router-dom\";\nimport './App.css';\nimport GermanNouns from './components/GermanNouns.js'\nimport GermanVerbs from './components/GermanVerbs.js'\nimport FrenchNouns from './components/FrenchNouns.js'\nimport FrenchVerbs from './components/FrenchVerbs.js'\nimport LatinNouns from './components/LatinNouns.js'\nimport LatinVerbs from './components/LatinVerbs.js'\nimport Footer from './components/Footer.js'\nimport Home from './components/Home.js'\n\nclass App extends Component {\n  render() {\n    const App = () => (\n    <div className=\"container\">\n\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/game/german/nouns\" component={GermanNouns} />\n        <Route path=\"/game/german/verbs\" component={GermanVerbs} />\n        <Route path=\"/game/french/nouns\" component={FrenchNouns} />\n        <Route path=\"/game/french/verbs\" component={FrenchVerbs} />\n        <Route path=\"/game/latin/nouns\" component={LatinNouns} />\n        <Route path=\"/game/latin/verbs\" component={LatinVerbs} />\n      </Switch>\n\n      </div>\n    )\n    return (\n      <Switch>\n        <App/>\n      </Switch>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styling/formatting.css';\nimport App from './App';\nimport { BrowserRouter as Router } from \"react-router-dom\"\nimport reportWebVitals from './reportWebVitals';\nimport \"core-js/stable\";\n\nReactDOM.render(<Router><App/></Router>, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}