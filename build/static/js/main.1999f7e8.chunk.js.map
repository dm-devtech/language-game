{"version":3,"sources":["components/GermanGame.js","components/FrenchGame.js","components/LatinGame.js","components/Home.js","App.js","reportWebVitals.js","index.js"],"names":["GermanGame","props","checkAnswer","e","parseInt","target","getAttribute","state","wordToMatch","id","changeWord","setState","answer","selectionOne","selectionTwo","selectionThree","counter","apiLength","correctSelection","availableSelectionsObj","availableSelectionsArr","randomOrderObj","orderArr","randomSelectionOne","randomSelectiontTwo","randomSelectiontThree","quantity","max","set","Set","add","size","Math","floor","random","a","this","apiData","newRandomWord","Array","from","myRandomInts","v","i","randomArray","myRandomOrder","randomSelectionTwo","randomSelectionThree","fetch","response","json","data","loading","length","data-testid","eng","onClick","word_id","ger","Component","FrenchGame","fre","LatinGame","lat","Home","className","to","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1999f7e8.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass GermanGame extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n      this.state = {\r\n        wordToMatch: [],\r\n        selectionOne: [],\r\n        selectionTwo: [],\r\n        selectionThree: [],\r\n        counter: 0,\r\n        answer: \"\",\r\n        apiLength: 0,\r\n        correctSelection: 0,\r\n        availableSelectionsObj: 0,\r\n        availableSelectionsArr: 0,\r\n        randomOrderObj: 0,\r\n        orderArr: 0,\r\n        randomSelectionOne: 0,\r\n        randomSelectiontTwo: 0,\r\n        randomSelectiontThree: 0,\r\n    }\r\n  }\r\n\r\n  myRandomInts(quantity, max, correctSelection){\r\n    const set = new Set()\r\n    set.add(correctSelection)\r\n    while(set.size < quantity) {\r\n      set.add(Math.floor(Math.random() * (max)) + 1)\r\n    }\r\n    return set\r\n  }\r\n\r\n  myRandomOrder(quantity, max){\r\n    const set = new Set()\r\n    while(set.size < quantity) {\r\n      set.add(Math.floor(Math.random() * (max)) + 1)\r\n    }\r\n    return set\r\n  }\r\n\r\n  checkAnswer = e => {\r\n    let id = parseInt(e.target.getAttribute('word_id'))\r\n    if(id === this.state.wordToMatch.id){\r\n      this.changeWord()\r\n        } else {\r\n      this.setState({answer: \"INCORRECT\"})\r\n    }\r\n    // id === this.state.wordToMatch.id ? console.log(\"correct\") : console.log(\"incorrect\")\r\n    // this.setState({counter: this.state.counter + 1})\r\n  }\r\n\r\n  async changeWord() {\r\n    this.setState({counter: this.state.counter + 1}) // score +1 when answer correct\r\n    this.setState({answer: \"CORRECT\"}) // correct message shown during game\r\n\r\n    const correctSelection = await Math.floor(Math.random() * (this.state.apiLength)) // random number based on api length\r\n    this.setState({correctSelection: correctSelection}) // random number for word index\r\n\r\n    const newRandomWord = await this.state.apiData[this.state.correctSelection] // using index with api to set word for turn\r\n    this.setState({wordToMatch: newRandomWord}) // allocating word to state\r\n\r\n    const randomArray = await Array.from(this.myRandomInts(3, this.state.apiLength, this.state.correctSelection), (v, i) => v) // random numbers for selections\r\n    this.setState({availableSelectionsArr: randomArray}) // allocating random numbers to state\r\n\r\n    this.setState({orderArr: Array.from(this.myRandomOrder(3, 3), (v, i) => v)}) // allocating randomised selection order to state\r\n\r\n    this.setState({randomSelectionOne: this.state.availableSelectionsArr[this.state.orderArr[0]-1]}) // randomising order of selections\r\n    this.setState({randomSelectionTwo: this.state.availableSelectionsArr[this.state.orderArr[1]-1]}) // same as above\r\n    this.setState({randomSelectionThree: this.state.availableSelectionsArr[this.state.orderArr[2]-1]}) // same as above\r\n\r\n    this.setState({selectionOne: this.state.apiData[this.state.randomSelectionOne]}) // setting selection to state used for buttons\r\n    this.setState({selectionTwo: this.state.apiData[this.state.randomSelectionTwo]}) // same as above\r\n    this.setState({selectionThree: this.state.apiData[this.state.randomSelectionThree]}) // same as above\r\n\r\n  }\r\n\r\n\r\n  async componentDidMount() {\r\n    const url = 'http://language-lighthouse.herokuapp.com/api/german'\r\n    const response = await fetch(url)\r\n    const data = await response.json()\r\n    this.setState({apiData: data, loading: false}) // setting data to state\r\n\r\n    // const cat = \"modal\" // category\r\n    // const newData = data.filter(function (word) { // filter array by category = modal verbs.  array indexes can then be used\r\n    // return word.category === cat;\r\n    // });\r\n    // console.log(newData)\r\n\r\n    this.setState({apiLength: data.length-1})\r\n\r\n    this.setState({correctSelection: Math.floor(Math.random() * (this.state.apiLength)) }) // random number based on api length\r\n    this.setState({wordToMatch: this.state.apiData[this.state.correctSelection]}) // using index with api to set word for turn\r\n\r\n    this.setState({randomArray: Array.from(this.myRandomInts(3, this.state.apiLength, this.state.correctSelection), (v, i) => v)}) // random numbers for selections\r\n    this.setState({availableSelectionsArr: this.state.randomArray}) // random numbers for selections allocated to available selections\r\n\r\n    this.setState({orderArr: Array.from(this.myRandomOrder(3, 3), (v, i) => v)}) // converting order obj to array and zero indexing\r\n\r\n    this.setState({randomSelectionOne: this.state.availableSelectionsArr[this.state.orderArr[0]-1]}) // random number for selection 1 using array of allWords and using random order\r\n    this.setState({randomSelectionTwo: this.state.availableSelectionsArr[this.state.orderArr[1]-1]}) // random number for selection 2 using array of allWords and using random order\r\n    this.setState({randomSelectionThree: this.state.availableSelectionsArr[this.state.orderArr[2]-1]}) // random number for selection 3 using array of allWords and using random order\r\n\r\n    this.setState({selectionOne: this.state.apiData[this.state.randomSelectionOne]}) // using word and random order to alocate selections to buttons\r\n    this.setState({selectionTwo: this.state.apiData[this.state.randomSelectionTwo]}) // same as above\r\n    this.setState({selectionThree: this.state.apiData[this.state.randomSelectionThree]}) // same as above\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Language LightHouse</h1>\r\n          <div>{this.state.answer}</div>\r\n          <br/>\r\n          {this.state.loading || !this.state.wordToMatch ? (\r\n            <div>loading...</div>\r\n          ) : (\r\n          <div>\r\n          <>\r\n                <div data-testid=\"eng\">English: {this.state.wordToMatch.eng}</div>\r\n                <br/>\r\n                Select from the below:\r\n                <br/>\r\n                <button onClick={this.checkAnswer} word_id={this.state.selectionOne.id}>Option 1: {this.state.selectionOne.ger} </button>\r\n                <br/>\r\n                <button onClick={this.checkAnswer} word_id={this.state.selectionTwo.id}>Option 2: {this.state.selectionTwo.ger} </button>\r\n                <br/>\r\n                <button onClick={this.checkAnswer} word_id={this.state.selectionThree.id}>Option 3: {this.state.selectionThree.ger} </button>\r\n                <br/>\r\n                Score: {this.state.counter}\r\n            </>\r\n          </div>\r\n          )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default GermanGame\r\n","import React, { Component } from 'react';\r\n\r\nclass FrenchGame extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n      this.state = {\r\n        wordToMatch: [],\r\n        selectionOne: [],\r\n        selectionTwo: [],\r\n        selectionThree: [],\r\n        counter: 0,\r\n        answer: \"\",\r\n        apiLength: 0,\r\n        correctSelection: 0,\r\n        availableSelectionsObj: 0,\r\n        availableSelectionsArr: 0,\r\n        randomOrderObj: 0,\r\n        orderArr: 0,\r\n        randomSelectionOne: 0,\r\n        randomSelectiontTwo: 0,\r\n        randomSelectiontThree: 0,\r\n    }\r\n  }\r\n\r\n  myRandomInts(quantity, max, correctSelection){\r\n    const set = new Set()\r\n    set.add(correctSelection)\r\n    while(set.size < quantity) {\r\n      set.add(Math.floor(Math.random() * (max)) + 1)\r\n    }\r\n    return set\r\n  }\r\n\r\n  myRandomOrder(quantity, max){\r\n    const set = new Set()\r\n    while(set.size < quantity) {\r\n      set.add(Math.floor(Math.random() * (max)) + 1)\r\n    }\r\n    return set\r\n  }\r\n\r\n  checkAnswer = e => {\r\n    let id = parseInt(e.target.getAttribute('word_id'))\r\n    if(id === this.state.wordToMatch.id){\r\n      this.changeWord()\r\n        } else {\r\n      this.setState({answer: \"INCORRECT\"})\r\n    }\r\n    // id === this.state.wordToMatch.id ? console.log(\"correct\") : console.log(\"incorrect\")\r\n    // this.setState({counter: this.state.counter + 1})\r\n  }\r\n\r\n  async changeWord() {\r\n    this.setState({counter: this.state.counter + 1}) // score +1 when answer correct\r\n    this.setState({answer: \"CORRECT\"}) // correct message shown during game\r\n\r\n    const correctSelection = await Math.floor(Math.random() * (this.state.apiLength)) // random number based on api length\r\n    this.setState({correctSelection: correctSelection}) // random number for word index\r\n\r\n    const newRandomWord = await this.state.apiData[this.state.correctSelection] // using index with api to set word for turn\r\n    this.setState({wordToMatch: newRandomWord}) // allocating word to state\r\n\r\n    const randomArray = await Array.from(this.myRandomInts(3, this.state.apiLength, this.state.correctSelection), (v, i) => v) // random numbers for selections\r\n    this.setState({availableSelectionsArr: randomArray}) // allocating random numbers to state\r\n\r\n    this.setState({orderArr: Array.from(this.myRandomOrder(3, 3), (v, i) => v)}) // allocating randomised selection order to state\r\n\r\n    this.setState({randomSelectionOne: this.state.availableSelectionsArr[this.state.orderArr[0]-1]}) // randomising order of selections\r\n    this.setState({randomSelectionTwo: this.state.availableSelectionsArr[this.state.orderArr[1]-1]}) // same as above\r\n    this.setState({randomSelectionThree: this.state.availableSelectionsArr[this.state.orderArr[2]-1]}) // same as above\r\n\r\n    this.setState({selectionOne: this.state.apiData[this.state.randomSelectionOne]}) // setting selection to state used for buttons\r\n    this.setState({selectionTwo: this.state.apiData[this.state.randomSelectionTwo]}) // same as above\r\n    this.setState({selectionThree: this.state.apiData[this.state.randomSelectionThree]}) // same as above\r\n\r\n  }\r\n\r\n\r\n  async componentDidMount() {\r\n    const url = 'http://language-lighthouse.herokuapp.com/api/french'\r\n    const response = await fetch(url)\r\n    const data = await response.json()\r\n    this.setState({apiData: data, loading: false}) // setting data to state\r\n\r\n    // const cat = \"modal\" // category\r\n    // const newData = data.filter(function (word) { // filter array by category = modal verbs.  array indexes can then be used\r\n    // return word.category === cat;\r\n    // });\r\n    // console.log(newData)\r\n\r\n    this.setState({apiLength: data.length-1})\r\n\r\n    this.setState({correctSelection: Math.floor(Math.random() * (this.state.apiLength)) }) // random number based on api length\r\n    this.setState({wordToMatch: this.state.apiData[this.state.correctSelection]}) // using index with api to set word for turn\r\n\r\n    this.setState({randomArray: Array.from(this.myRandomInts(3, this.state.apiLength, this.state.correctSelection), (v, i) => v)}) // random numbers for selections\r\n    this.setState({availableSelectionsArr: this.state.randomArray}) // random numbers for selections allocated to available selections\r\n\r\n    this.setState({orderArr: Array.from(this.myRandomOrder(3, 3), (v, i) => v)}) // converting order obj to array and zero indexing\r\n\r\n    this.setState({randomSelectionOne: this.state.availableSelectionsArr[this.state.orderArr[0]-1]}) // random number for selection 1 using array of allWords and using random order\r\n    this.setState({randomSelectionTwo: this.state.availableSelectionsArr[this.state.orderArr[1]-1]}) // random number for selection 2 using array of allWords and using random order\r\n    this.setState({randomSelectionThree: this.state.availableSelectionsArr[this.state.orderArr[2]-1]}) // random number for selection 3 using array of allWords and using random order\r\n\r\n    this.setState({selectionOne: this.state.apiData[this.state.randomSelectionOne]}) // using word and random order to alocate selections to buttons\r\n    this.setState({selectionTwo: this.state.apiData[this.state.randomSelectionTwo]}) // same as above\r\n    this.setState({selectionThree: this.state.apiData[this.state.randomSelectionThree]}) // same as above\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Language LightHouse</h1>\r\n          <div>{this.state.answer}</div>\r\n          <br/>\r\n          {this.state.loading || !this.state.wordToMatch ? (\r\n            <div>loading...</div>\r\n          ) : (\r\n          <div>\r\n          <>\r\n                <div data-testid=\"eng\">English: {this.state.wordToMatch.eng}</div>\r\n                <br/>\r\n                Select from the below:\r\n                <br/>\r\n                <button onClick={this.checkAnswer} word_id={this.state.selectionOne.id}>Option 1: {this.state.selectionOne.fre} </button>\r\n                <br/>\r\n                <button onClick={this.checkAnswer} word_id={this.state.selectionTwo.id}>Option 2: {this.state.selectionTwo.fre} </button>\r\n                <br/>\r\n                <button onClick={this.checkAnswer} word_id={this.state.selectionThree.id}>Option 3: {this.state.selectionThree.fre} </button>\r\n                <br/>\r\n                Score: {this.state.counter}\r\n            </>\r\n          </div>\r\n          )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default FrenchGame\r\n","import React, { Component } from 'react';\r\n\r\nclass LatinGame extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n      this.state = {\r\n        wordToMatch: [],\r\n        selectionOne: [],\r\n        selectionTwo: [],\r\n        selectionThree: [],\r\n        counter: 0,\r\n        answer: \"\",\r\n        apiLength: 0,\r\n        correctSelection: 0,\r\n        availableSelectionsObj: 0,\r\n        availableSelectionsArr: 0,\r\n        randomOrderObj: 0,\r\n        orderArr: 0,\r\n        randomSelectionOne: 0,\r\n        randomSelectiontTwo: 0,\r\n        randomSelectiontThree: 0,\r\n    }\r\n  }\r\n\r\n  myRandomInts(quantity, max, correctSelection){\r\n    const set = new Set()\r\n    set.add(correctSelection)\r\n    while(set.size < quantity) {\r\n      set.add(Math.floor(Math.random() * (max)) + 1)\r\n    }\r\n    return set\r\n  }\r\n\r\n  myRandomOrder(quantity, max){\r\n    const set = new Set()\r\n    while(set.size < quantity) {\r\n      set.add(Math.floor(Math.random() * (max)) + 1)\r\n    }\r\n    return set\r\n  }\r\n\r\n  checkAnswer = e => {\r\n    let id = parseInt(e.target.getAttribute('word_id'))\r\n    if(id === this.state.wordToMatch.id){\r\n      this.changeWord()\r\n        } else {\r\n      this.setState({answer: \"INCORRECT\"})\r\n    }\r\n    // id === this.state.wordToMatch.id ? console.log(\"correct\") : console.log(\"incorrect\")\r\n    // this.setState({counter: this.state.counter + 1})\r\n  }\r\n\r\n  async changeWord() {\r\n    this.setState({counter: this.state.counter + 1}) // score +1 when answer correct\r\n    this.setState({answer: \"CORRECT\"}) // correct message shown during game\r\n\r\n    const correctSelection = await Math.floor(Math.random() * (this.state.apiLength)) // random number based on api length\r\n    this.setState({correctSelection: correctSelection}) // random number for word index\r\n\r\n    const newRandomWord = await this.state.apiData[this.state.correctSelection] // using index with api to set word for turn\r\n    this.setState({wordToMatch: newRandomWord}) // allocating word to state\r\n\r\n    const randomArray = await Array.from(this.myRandomInts(3, this.state.apiLength, this.state.correctSelection), (v, i) => v) // random numbers for selections\r\n    this.setState({availableSelectionsArr: randomArray}) // allocating random numbers to state\r\n\r\n    this.setState({orderArr: Array.from(this.myRandomOrder(3, 3), (v, i) => v)}) // allocating randomised selection order to state\r\n\r\n    this.setState({randomSelectionOne: this.state.availableSelectionsArr[this.state.orderArr[0]-1]}) // randomising order of selections\r\n    this.setState({randomSelectionTwo: this.state.availableSelectionsArr[this.state.orderArr[1]-1]}) // same as above\r\n    this.setState({randomSelectionThree: this.state.availableSelectionsArr[this.state.orderArr[2]-1]}) // same as above\r\n\r\n    this.setState({selectionOne: this.state.apiData[this.state.randomSelectionOne]}) // setting selection to state used for buttons\r\n    this.setState({selectionTwo: this.state.apiData[this.state.randomSelectionTwo]}) // same as above\r\n    this.setState({selectionThree: this.state.apiData[this.state.randomSelectionThree]}) // same as above\r\n\r\n  }\r\n\r\n\r\n  async componentDidMount() {\r\n    const url = 'http://language-lighthouse.herokuapp.com/api/latin'\r\n    const response = await fetch(url)\r\n    const data = await response.json()\r\n    this.setState({apiData: data, loading: false}) // setting data to state\r\n\r\n    // const cat = \"modal\" // category\r\n    // const newData = data.filter(function (word) { // filter array by category = modal verbs.  array indexes can then be used\r\n    // return word.category === cat;\r\n    // });\r\n    // console.log(newData)\r\n\r\n    this.setState({apiLength: data.length-1})\r\n\r\n    this.setState({correctSelection: Math.floor(Math.random() * (this.state.apiLength)) }) // random number based on api length\r\n    this.setState({wordToMatch: this.state.apiData[this.state.correctSelection]}) // using index with api to set word for turn\r\n\r\n    this.setState({randomArray: Array.from(this.myRandomInts(3, this.state.apiLength, this.state.correctSelection), (v, i) => v)}) // random numbers for selections\r\n    this.setState({availableSelectionsArr: this.state.randomArray}) // random numbers for selections allocated to available selections\r\n\r\n    this.setState({orderArr: Array.from(this.myRandomOrder(3, 3), (v, i) => v)}) // converting order obj to array and zero indexing\r\n\r\n    this.setState({randomSelectionOne: this.state.availableSelectionsArr[this.state.orderArr[0]-1]}) // random number for selection 1 using array of allWords and using random order\r\n    this.setState({randomSelectionTwo: this.state.availableSelectionsArr[this.state.orderArr[1]-1]}) // random number for selection 2 using array of allWords and using random order\r\n    this.setState({randomSelectionThree: this.state.availableSelectionsArr[this.state.orderArr[2]-1]}) // random number for selection 3 using array of allWords and using random order\r\n\r\n    this.setState({selectionOne: this.state.apiData[this.state.randomSelectionOne]}) // using word and random order to alocate selections to buttons\r\n    this.setState({selectionTwo: this.state.apiData[this.state.randomSelectionTwo]}) // same as above\r\n    this.setState({selectionThree: this.state.apiData[this.state.randomSelectionThree]}) // same as above\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Language LightHouse</h1>\r\n          <div>{this.state.answer}</div>\r\n          <br/>\r\n          {this.state.loading || !this.state.wordToMatch ? (\r\n            <div>loading...</div>\r\n          ) : (\r\n          <div>\r\n          <>\r\n                <div data-testid=\"eng\">English: {this.state.wordToMatch.eng}</div>\r\n                <br/>\r\n                Select from the below:\r\n                <br/>\r\n                <button onClick={this.checkAnswer} word_id={this.state.selectionOne.id}>Option 1: {this.state.selectionOne.lat} </button>\r\n                <br/>\r\n                <button onClick={this.checkAnswer} word_id={this.state.selectionTwo.id}>Option 2: {this.state.selectionTwo.lat} </button>\r\n                <br/>\r\n                <button onClick={this.checkAnswer} word_id={this.state.selectionThree.id}>Option 3: {this.state.selectionThree.lat} </button>\r\n                <br/>\r\n                Score: {this.state.counter}\r\n            </>\r\n          </div>\r\n          )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default LatinGame\r\n","import React, { Component } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass Home extends Component {\r\nrender(){\r\n    return (\r\n      <div className=\"header\">\r\n        <h1>Language LightHouse</h1>\r\n        <h2>Language Learning App</h2>\r\n        <h3>Select a language</h3>\r\n          <br/>\r\n          <div className=\"home-buttons\">\r\n            <button><Link to={\"/game/german\"}>Deutsch</Link></button>\r\n            <br/>\r\n            <button><Link to={\"/game/french\"}>Francais</Link></button>\r\n            <br/>\r\n            <button><Link to={\"/game/latin\"}>Lingua Latina</Link></button>\r\n            <br/>\r\n          </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default Home\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport './App.css';\nimport GermanGame from './components/GermanGame.js'\nimport FrenchGame from './components/FrenchGame.js'\nimport LatinGame from './components/LatinGame.js'\nimport Home from './components/Home.js'\n\nfunction App() {\n  return (\n    <div className=\"container\">\n        <Router>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route exact path=\"/game/german\">\n            <GermanGame />\n          </Route>\n          <Route exact path=\"/game/french\">\n            <FrenchGame />\n          </Route>\n          <Route exact path=\"/game/latin\">\n            <LatinGame />\n          </Route>\n        </Router>\n      </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styling/home.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}